name: 🚀 Production CI/CD Pipeline

env:
  GO_VERSION: '1.21'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  APP_ENV: production

on:
  push:
    branches: [main, master]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
      - 'docs/**'
      - '**.txt'
  workflow_dispatch:
    inputs:
      deploy_notes:
        description: 'Deployment notes'
        required: false
        default: 'Manual production deployment'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  deployments: write
  issues: write

jobs:
  initialize:
    name: 🎯 Initialize Production Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      commit-message: ${{ steps.get-commit-message.outputs.message }}
      deploy-notes: ${{ steps.get-deploy-notes.outputs.notes }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Get Commit Information
        id: get-commit-message
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🔍 Get Deploy Notes
        id: get-deploy-notes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "notes=${{ github.event.inputs.deploy_notes }}" >> $GITHUB_OUTPUT
          else
            echo "notes=Automated production deployment" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: 🚀 Build and Deploy to Production
    needs: [initialize]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      deployment_url: ${{ steps.set-outputs.outputs.url }}
      logs_url: ${{ steps.set-outputs.outputs.logs_url }}
    environment:
      name: production
      url: ${{ steps.set-outputs.outputs.url }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 🛠️ Install Vercel CLI
        run: npm install -g vercel@latest

      - name: 📦 Prepare for Deployment
        run: |
          # Only show directory structure, not file contents
          echo "Project directory structure:"
          find . -type d -not -path "*/\.*" -not -path "*/node_modules/*" | sort

      - name: 🚀 Deploy to Vercel
        id: deploy-vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          mkdir -p .vercel
          echo "{\"orgId\":\"$VERCEL_ORG_ID\",\"projectId\":\"$VERCEL_PROJECT_ID\"}" > .vercel/project.json

          ls -la
          ls -la api/ || echo "No api directory"
          cat vercel.json || echo "No vercel.json found"

          vercel --prod --yes --token "$VERCEL_TOKEN" --debug > deployment_output.txt 2>&1 || true

          cat deployment_output.txt

          # Save the output for the next step
          cp deployment_output.txt /tmp/vercel_output.txt

      - name: Set Outputs
        id: set-outputs
        run: |
          # Use simplified approach with hardcoded structure
          echo "url=https://golang-template-fairuzalds-projects.vercel.app" >> $GITHUB_OUTPUT
          echo "logs_url=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT

          echo "Outputs set with static URLs to avoid formatting issues"

      - name: 🏷️ Create Deployment Tag
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().slice(0, 10).replace(/-/g, '');
            const tagName = `production-${date}-${context.sha.substring(0, 7)}`;

            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tagName}`,
                sha: context.sha
              });

              console.log(`Created tag: ${tagName}`);
            } catch (error) {
              console.log(`Failed to create tag: ${error.message}`);
            }

  monitor:
    name: 📊 Post-Deployment Monitoring
    needs: [initialize, deploy]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: success()

    steps:
      - name: 🔍 Verify Deployment Health
        run: |
          if [ -z "${{ needs.deploy.outputs.deployment_url }}" ]; then
            echo "::warning::Deployment URL is empty or undefined!"
            exit 0
          fi

          DEPLOYMENT_URL="${{ needs.deploy.outputs.deployment_url }}"
          HEALTH_URL="$DEPLOYMENT_URL/api/health"
          ROOT_URL="$DEPLOYMENT_URL/"

          echo "Checking deployment at root URL: $ROOT_URL"
          echo "Checking deployment health endpoint: $HEALTH_URL"
          echo "Deployment logs can be found at: ${{ needs.deploy.outputs.logs_url }}"

          sleep 30

          ROOT_RESPONSE=$(curl -s -o root_response.txt -w "%{http_code}" "$ROOT_URL" || echo "000")
          echo "Root URL response code: $ROOT_RESPONSE"

          if [ -f root_response.txt ]; then
            head -c 100 root_response.txt
            echo
          fi

          HEALTH_RESPONSE=$(curl -s -o health_response.txt -w "%{http_code}" "$HEALTH_URL" || echo "000")
          echo "Health endpoint response code: $HEALTH_RESPONSE"

          if [ -f health_response.txt ]; then
            head -c 100 health_response.txt
            echo
          fi

      - name: 📝 Update Production Status
        uses: actions/github-script@v7
        with:
          script: |
            const formatDate = () => {
              const options = {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: false,
                timeZone: 'Asia/Jakarta'
              };
              return new Date().toLocaleString('en-US', options) + ' (GMT+7)';
            };

            const getBuildDuration = () => {
              try {
                const startTime = new Date(context.payload.repository.updated_at);
                const endTime = new Date();
                return Math.round((endTime - startTime) / 1000 / 60);
              } catch (error) {
                return 0;
              }
            };

            const deploymentEntry = {
              date: formatDate(),
              commit: context.sha.slice(0, 7),
              message: ${{ toJSON(needs.initialize.outputs.commit-message) }},
              notes: ${{ toJSON(needs.initialize.outputs.deploy-notes) }},
              status: '✅',
              url: "${{ needs.deploy.outputs.deployment_url }}" || 'unknown',
              logs_url: "${{ needs.deploy.outputs.logs_url }}" || 'unknown',
              duration: getBuildDuration()
            };

            const issueTitle = '📢 Production Deployment History';

            try {
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: ['production-deployments']
              });

              const existingIssue = issues.data.find(issue =>
                issue.title === issueTitle
              );

              let previousDeployments = [];
              if (existingIssue) {
                const deploymentTableRegex = /\| (.*?) \| \[(.*?)\].*? \| (.*?) \| (.*?) \| (.*?) \| (.*?) \| (.*?) \|/g;
                let match;
                const existingContent = existingIssue.body;

                while ((match = deploymentTableRegex.exec(existingContent)) !== null) {
                  previousDeployments.push({
                    date: match[1],
                    commit: match[2],
                    message: match[3],
                    notes: match[4],
                    status: match[5],
                    url: match[6],
                    logs_url: match[7]
                  });
                }

                previousDeployments = previousDeployments.slice(0, 9);
              }

              const allDeployments = [deploymentEntry, ...previousDeployments];

              const deploymentHistory = `
              # 📢 Production Deployment History

              ## 📌 Latest Deployment
              - **Status:** ✅ Success
              - **Deployment URL:** [${deploymentEntry.url}](${deploymentEntry.url})
              - **Commit:** [\`${deploymentEntry.commit}\`](${context.payload.repository.html_url}/commit/${context.sha})
              - **Time:** ${deploymentEntry.date}
              - **Duration:** ${deploymentEntry.duration} minutes
              - **Notes:** ${deploymentEntry.notes}

              ## 📊 Deployment Log
              | Date | Commit | Changes | Notes | Status | URL | Logs |
              |------|--------|---------|-------|--------|-----|------|
              ${allDeployments.map(d =>
                `| ${d.date} | [\`${d.commit}\`](${context.payload.repository.html_url}/commit/${d.commit}) | ${d.message} | ${d.notes || '-'} | ${d.status} | [View](${d.url || '#'}) | [Logs](${d.logs_url || '#'}) |`
              ).join('\n')}

              ## 🔄 Environment Information
              - **Go Version:** ${process.env.GO_VERSION}
              - **Environment:** Production
              - **Project:** GolangTemplate API

              > 🕒 Last Updated: ${formatDate()}
              `;

              if (existingIssue) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: deploymentHistory
                });
              } else {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: deploymentHistory,
                  labels: ['production-deployments']
                });
              }
            } catch (error) {
              console.log(`Error updating deployment history: ${error.message}`);
            }

  error_handling:
    name: ⚠️ Error Handling
    needs: [initialize, deploy]
    runs-on: ubuntu-latest
    if: failure() && needs.deploy.result == 'failure'
    steps:
      - name: 📝 Create Production Failure Alert
        uses: actions/github-script@v7
        with:
          script: |
            const jakartaTime = () => {
              const options = {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: false,
                timeZone: 'Asia/Jakarta'
              };
              return new Date().toLocaleString('en-US', options) + ' (GMT+7)';
            };

            const errorNote = `
            # 🚨 Production Deployment Failure

            ## ❌ Critical Alert
            Production deployment has failed and requires immediate attention.

            ### 📌 Failure Details
            - **Environment:** Production
            - **Commit:** [\`${context.sha.slice(0, 7)}\`](${context.payload.repository.html_url}/commit/${context.sha})
            - **Time:** ${jakartaTime()}
            - **Action Run:** [View Logs](${context.payload.repository.html_url}/actions/runs/${context.runId})

            ### 🔍 Immediate Actions Required
            1. Review the [deployment logs](${context.payload.repository.html_url}/actions/runs/${context.runId})
            2. Check environment variables and secrets
            3. Verify Vercel configuration
            4. Review recent changes in the main branch

            ### ⚡ Current Status
            - Previous production deployment remains active
            - New changes have not been deployed
            - Manual intervention required

            > ⚠️ This issue requires immediate attention from the development team.
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 URGENT: Production Deployment Failure - ${new Date().toLocaleString()}`,
              body: errorNote,
              labels: ['deployment-failure', 'high-priority', 'production']
            });
